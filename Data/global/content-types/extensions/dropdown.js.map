//CHECKSUM:63de44938d9d9b9ac2ce078e135bd15a4263c041982b31b23a5d1bc46d5d66d2
{"version":3,"sources":["../content-types/dropdown.js"],"names":["base","require","render","data","events","typing","push","type","value","module","component","message","buttonText","displayInKeyboard","options","allowCreation","allowMultiple","width","renderElement","channel","exports","id","group","title","jsonSchema","required","properties","description","default","items","label","typingIndicators","uiSchema","computePreviewText","formData"],"mappings":"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","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/extensions/src/backend","sourcesContent":["const base = require('./_base')\n\nfunction render(data) {\n  const events = []\n\n  if (data.typing) {\n    events.push({\n      type: 'typing',\n      value: data.typing\n    })\n  }\n\n  return [\n    ...events,\n    {\n      type: 'custom',\n      module: 'extensions',\n      component: 'Dropdown',\n      message: data.message,\n      buttonText: data.buttonText,\n      displayInKeyboard: data.displayInKeyboard,\n      options: data.options,\n      allowCreation: data.allowCreation,\n      allowMultiple: data.allowMultiple,\n      width: data.width\n    }\n  ]\n}\n\nfunction renderElement(data, channel) {\n  if (channel === 'web' || channel === 'api') {\n    return render(data)\n  }\n\n  return []\n}\n\nmodule.exports = {\n  id: 'dropdown',\n  group: 'Extensions',\n  title: 'Dropdown',\n\n  jsonSchema: {\n    title: 'Displays a list of options to the user',\n    type: 'object',\n    required: ['message'],\n    properties: {\n      message: {\n        type: 'string',\n        title: 'Message'\n      },\n      buttonText: {\n        type: 'string',\n        title: 'The text to display on the button.',\n        description: 'When left blank, the selected option is sent when the dropdown is closed',\n        default: ''\n      },\n      options: {\n        type: 'array',\n        title: 'List of options',\n        items: {\n          type: 'object',\n          required: ['label'],\n          properties: {\n            label: {\n              description: 'The text displayed in the dropdown menu',\n              type: 'string',\n              title: 'Label'\n            },\n            value: {\n              description: 'The value that the bot will receive (optional)',\n              type: 'string',\n              title: 'Value'\n            }\n          }\n        }\n      },\n      width: {\n        type: 'number',\n        title: 'The width of the component (in pixels)',\n        description: 'The default size displays the select and the button on one line. Change it to fit your needs',\n        default: 200\n      },\n      displayInKeyboard: {\n        type: 'boolean',\n        title: 'Display as keyboard',\n        description: 'It will be displayed right on top of the composer (like choices)',\n        default: true\n      },\n      allowCreation: {\n        type: 'boolean',\n        title: 'Allow creation of new options'\n      },\n      allowMultiple: {\n        type: 'boolean',\n        title: 'Allow multiple choices'\n      },\n      ...base.typingIndicators\n    }\n  },\n  uiSchema: {\n    message: { 'ui:field': 'i18n_field' },\n    buttonText: { 'ui:field': 'i18n_field' },\n    options: { 'ui:field': 'i18n_array' }\n  },\n  computePreviewText: formData => formData.message && 'Dropdown: ' + formData.message,\n  renderElement\n}\n"]}