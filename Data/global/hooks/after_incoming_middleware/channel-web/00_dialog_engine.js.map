//CHECKSUM:fa0e0aded5121b812b7825fc3b39e6082e1a88518e2c0a9496704b37d66366c6
{"version":3,"sources":["../hooks/after_incoming_middleware/00_dialog_engine.js"],"names":["messageTypesToDiscard","includes","event","type","setFlag","bp","IO","WellKnownFlags","SKIP_DIALOG_ENGINE","logger","warn","payload","saySomethingHook","text","length","startsWith","content","cms","renderElement","events","replyToEvent","payloads","typing"],"mappings":";;AAAA,MAAMA,qBAAqB,GAAG,CAAC,4BAAD,EAA+B,eAA/B,EAAgD,UAAhD,CAA9B;;AAEA,IAAIA,qBAAqB,CAACC,QAAtB,CAA+BC,KAAK,CAACC,IAArC,CAAJ,EAAgD;AAC9CD,EAAAA,KAAK,CAACE,OAAN,CAAcC,EAAE,CAACC,EAAH,CAAMC,cAAN,CAAqBC,kBAAnC,EAAuD,IAAvD;;AAEA,MAAIN,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7BE,IAAAA,EAAE,CAACI,MAAH,CAAUC,IAAV,CAAgB,mCAAkCR,KAAK,CAACS,OAAQ;;uFAAhE;AAGD;AACF;;AAED,MAAMC,gBAAgB,GAAG,YAAY;AACnC,QAAMC,IAAI,GAAGX,KAAK,CAACS,OAAN,CAAcE,IAA3B;;AAEA,MAAIX,KAAK,CAACC,IAAN,KAAe,eAAf,IAAkCU,IAAlC,IAA0CA,IAAI,CAACC,MAAnD,EAA2D;AACzD,QAAID,IAAI,CAACE,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB;;;;AAIA,YAAMC,OAAO,GAAG,MAAMX,EAAE,CAACY,GAAH,CAAOC,aAAP,CAAqBL,IAArB,EAA2BX,KAA3B,EAAkCA,KAAlC,CAAtB;AACA,YAAMG,EAAE,CAACc,MAAH,CAAUC,YAAV,CAAuBlB,KAAvB,EAA8Bc,OAA9B,CAAN;AACD,KAPD,MAOO;AACL;AACA,YAAMK,QAAQ,GAAG,MAAMhB,EAAE,CAACY,GAAH,CAAOC,aAAP,CAAqB,cAArB,EAAqC;AAAEL,QAAAA,IAAF;AAAQS,QAAAA,MAAM,EAAE;AAAhB,OAArC,EAA6DpB,KAA7D,CAAvB;AACA,YAAMG,EAAE,CAACc,MAAH,CAAUC,YAAV,CAAuBlB,KAAvB,EAA8BmB,QAA9B,CAAN;AACD;AACF;AACF,CAjBD;;AAmBA,OAAOT,gBAAgB,EAAvB","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/channel-web/src/backend","sourcesContent":["const messageTypesToDiscard = ['request_start_conversation', 'say_something', 'postback']\n\nif (messageTypesToDiscard.includes(event.type)) {\n  event.setFlag(bp.IO.WellKnownFlags.SKIP_DIALOG_ENGINE, true)\n\n  if (event.type === 'postback') {\n    bp.logger.warn(`Just received a postback event: ${event.payload}. \n    To handle these kind of events. you need to create a hook that will process them.\n    Please refer to the documentation here: https://botpress.io/docs/build/code/#hooks`)\n  }\n}\n\nconst saySomethingHook = async () => {\n  const text = event.payload.text\n\n  if (event.type === 'say_something' && text && text.length) {\n    if (text.startsWith('#!')) {\n      /**\n       * Sends an existing content element. Event is specified twice, since the first parameters are the\n       * element arguments, and the second one is the event destination (required fields: botId, target, threadId, channel)\n       */\n      const content = await bp.cms.renderElement(text, event, event)\n      await bp.events.replyToEvent(event, content)\n    } else {\n      // Sends a basic text message\n      const payloads = await bp.cms.renderElement('builtin_text', { text, typing: true }, event)\n      await bp.events.replyToEvent(event, payloads)\n    }\n  }\n}\n\nreturn saySomethingHook()\n"]}