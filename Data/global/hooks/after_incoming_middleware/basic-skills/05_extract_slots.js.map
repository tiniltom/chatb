//CHECKSUM:362ca3f5ecafe43c021b21e303672fb7c8cebf349ed6f55958242ddf85ad887c
{"version":3,"sources":["../hooks/after_incoming_middleware/05_extract_slots.js"],"names":["_","require","event","state","session","slots","handleSlotsExpiry","extractIntentSlots","flatten","values","nlu","filter","x","value","slot","name","overwritable","Array","isArray","notFound","setFlag","bp","IO","WellKnownFlags","FORCE_PERSIST_STATE","timestamp","Date","now","turns","expiresAfterTurns"],"mappings":";;AAAA,MAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB,C,CAEA;;;AACAC,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,GAA4BH,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,IAA6B,EAAzD;AACAC,iBAAiB;AACjBC,kBAAkB;;AAElB,SAASA,kBAAT,GAA8B;AAC5B,QAAMF,KAAK,GAAGL,CAAC,CAACQ,OAAF,CAAUR,CAAC,CAACS,MAAF,CAASP,KAAK,CAACQ,GAAN,CAAUL,KAAnB,CAAV,EAAqCM,MAArC,CAA4CC,CAAC,IAAI,CAAC,CAACA,CAAC,CAACC,KAArD,CAAd,CAD4B,CAC8C;;;AAC1E,OAAK,IAAIC,IAAT,IAAiBT,KAAjB,EAAwB;AACtB;AACA,QAAIH,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,CAA0BS,IAAI,CAACC,IAA/B,KAAwCb,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,CAA0BS,IAAI,CAACC,IAA/B,EAAqCC,YAArC,IAAqD,KAAjG,EAAwG;AACtG;AACD,KAJqB,CAMtB;AACA;;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvBA,MAAAA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAX;AACD;;AAEDZ,IAAAA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,CAA0Bc,QAA1B,GAAqC,CAArC;AACAjB,IAAAA,KAAK,CAACkB,OAAN,CAAcC,EAAE,CAACC,EAAH,CAAMC,cAAN,CAAqBC,mBAAnC,EAAwD,IAAxD;AACAtB,IAAAA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,CAA0BS,IAAI,CAACC,IAA/B,IAAuC,EACrC,GAAGD,IADkC;AAErCW,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAF0B;AAGrCC,MAAAA,KAAK,EAAE,CAH8B;AAIrCZ,MAAAA,YAAY,EAAE,IAJuB;AAKrCa,MAAAA,iBAAiB,EAAE,KALkB,CAKZ;;AALY,KAAvC;AAOD;AACF;;AAED,SAASvB,iBAAT,GAA6B;AAC3B,OAAK,IAAIQ,IAAT,IAAiBd,CAAC,CAACS,MAAF,CAASP,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAA7B,CAAjB,EAAsD;AACpD,QAAI,OAAOS,IAAI,CAACc,KAAZ,KAAsB,QAA1B,EAAoC;AAClC,QAAEd,IAAI,CAACc,KAAP;AACD,KAHmD,CAKpD;;;AACA,QAAI,OAAOd,IAAI,CAACe,iBAAZ,KAAkC,QAAlC,IAA8Cf,IAAI,CAACc,KAAL,IAAcd,IAAI,CAACe,iBAArE,EAAwF;AACtF,aAAO3B,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBC,KAApB,CAA0BS,IAAI,CAACC,IAA/B,CAAP;AACD;AACF;AACF","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/basic-skills/src/backend","sourcesContent":["const _ = require('lodash')\n\n// Make sure slots exists exists\nevent.state.session.slots = event.state.session.slots || {}\nhandleSlotsExpiry()\nextractIntentSlots()\n\nfunction extractIntentSlots() {\n  const slots = _.flatten(_.values(event.nlu.slots)).filter(x => !!x.value) // only non-null slots\n  for (let slot of slots) {\n    // BETA(11.8.4): Prevent overwrite of the slot if explicitely demanded\n    if (event.state.session.slots[slot.name] && event.state.session.slots[slot.name].overwritable == false) {\n      continue\n    }\n\n    // Slot is an array when the NLU is confused about the results\n    // The array is sorted by confidence so we take the first index\n    if (Array.isArray(slot)) {\n      slot = slot[0]\n    }\n\n    event.state.session.slots.notFound = 0\n    event.setFlag(bp.IO.WellKnownFlags.FORCE_PERSIST_STATE, true)\n    event.state.session.slots[slot.name] = {\n      ...slot,\n      timestamp: Date.now(),\n      turns: 0,\n      overwritable: true,\n      expiresAfterTurns: false // BETA(11.8.4): Set this to a number to expire the slot after 'N' turns\n    }\n  }\n}\n\nfunction handleSlotsExpiry() {\n  for (let slot of _.values(event.state.session.slots)) {\n    if (typeof slot.turns === 'number') {\n      ++slot.turns\n    }\n\n    // BETA(11.8.4): Automatically expire the slot after X dialog turns\n    if (typeof slot.expiresAfterTurns === 'number' && slot.turns >= slot.expiresAfterTurns) {\n      delete event.state.session.slots[slot.name]\n    }\n  }\n}\n"]}