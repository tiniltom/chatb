//CHECKSUM:a45b4013a8d012bdd0c6787b0dbbdb460ac278b46606b96ee4cd1896474f49c1
{"version":3,"sources":["../actions/README.js"],"names":["util","require","axios","console","log","inspect","args","temp","pageSource","makeHttpRequest","data","get","pageToFetch"],"mappings":";;AAAA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEAE,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,IAAI,CAACK,OAAL,CAAaC,IAAb,EAAmB,KAAnB,EAA0B,CAA1B,EAA6B,IAA7B,CAA3B;;AAEA,IAAI,gBAAgBC,IAApB,EAA0B;AACxB;AACA,SAAOA,IAAI,CAACC,UAAZ;AACD;;AAED,eAAeC,eAAf,GAAiC;AAC/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMR,KAAK,CAACS,GAAN,CAAUL,IAAI,CAACM,WAAL,IAAoB,oBAA9B,CAAvB;AACAL,EAAAA,IAAI,CAACC,UAAL,GAAkBE,IAAlB;AACD,C,CAED;;;AACA,OAAOD,eAAe,EAAtB","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/builtin/src/backend","sourcesContent":["/**\n * This is just an example of how to create custom actions.\n * If you're reading this from the Flow Editor and wonder how you can create an new action,\n * See the `{botpressDir}/data/global/actions/builtin/README.js` file.\n *\n * @title Custom Action Example\n * @category tutorial\n * @param {string} [pageToFetch=https://google.com] - The page to fetch\n */\n\n/** @ignore\n * @var temp\n * @var user\n *\n * ----------------------------\n * ---- Creating an Action ----\n * ----------------------------\n *\n * -- STORAGE --\n * In the global scope you have access to the following storage objects:\n * @var temp     Temporary flow-level storage.  Unique to every flow execution.  Ideal for logic implementation such as data returned from APIs.\n * @var user     Permanent user-level storage.  Unique to every users.  Ideal for remembering things specific to a user such as email, name, customerId, etc.\n * @var session  Temporary session-level storage.  Unique to every dialog sessions, which is time-bound (defaults to 15 minutes).  Ideal for remembering things specific to a conversation.\n *\n * -- CONTEXT --\n * In the global scope you have access to the @var event variable.\n *\n * -- PARAMETERS --\n * In the global scope you have access to the @var args object.\n * The @var args object is a key-value-pair of parameters defined when calling the action from the Flow Editor.\n *\n * -- ASYNC --\n * Actions can run asynchronously by returning a Promise.  If you want to use the `await` keyword, you need to declare an async function\n * and return a call to that function. @file `./builtin/getGlobalVariable.js` for a concrete example.\n *\n * -- REQUIRE MODULES --\n * You can require external modules by using `require('module-name')`.  A `node_modules` directory needs to be present next to the action\n * and the dependency needs to be present in this directory.  You can use npm/yarn inside the actions directory to manage dependencies.\n * Some modules are available by default such as axios and lodash\n *\n * -- REQUIRE FILES --\n * You can require adjacent .js and .json files, simply use `require('./path_to_file.js')`.  If the adjacent file is a .js file and is not intended to be an action in itself,\n * consider prefixing the file with a dot (.) so Botpress ignores it when looking for actions.\n *\n * -- METADATA --\n * You can change how the action will be presented in the Flow Editor by using JSDoc comments.  See example at the top of the file.\n */\n\nconst util = require('util')\nconst axios = require('axios')\n\nconsole.log('Arguments =', util.inspect(args, false, 2, true))\n\nif ('pageSource' in temp) {\n  // Mutate the `temp` object\n  delete temp.pageSource\n}\n\nasync function makeHttpRequest() {\n  // args.pageToFetch is an optional parameter that can be overwritten by the user in the Flow Editor\n  const { data } = await axios.get(args.pageToFetch || 'https://google.com')\n  temp.pageSource = data\n}\n\n// Making an async HTTP request\nreturn makeHttpRequest()\n"]}