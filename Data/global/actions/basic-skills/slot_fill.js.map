//CHECKSUM:09cd67b678a33fde8b2c004a3e9ec7a5e1b1ee4d6c8db66dc19a76572cfc83c9
{"version":3,"sources":["../actions/slot_fill.js"],"names":["slotFill","slotName","entitiesName","entities","split","length","event","nlu","entity","includes","name","setSlot","value","payload","text","preview","type","meta","start","end","data","extras","session","slots","timestamp","Date","now","turns","overwritable","expiresAfterTurns","notFound","args"],"mappings":";;AAAA;;;;;;AAMA,MAAMA,QAAQ,GAAG,OAAOC,QAAP,EAAiBC,YAAjB,KAAkC;AACjD,QAAMC,QAAQ,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAjB;;AACA,MAAID,QAAQ,IAAIA,QAAQ,CAACE,MAArB,IAA+BC,KAAK,CAACC,GAAN,CAAUJ,QAAzC,IAAqDG,KAAK,CAACC,GAAN,CAAUJ,QAAV,CAAmBE,MAA5E,EAAoF;AAClF,SAAK,MAAMG,MAAX,IAAqBF,KAAK,CAACC,GAAN,CAAUJ,QAA/B,EAAyC;AACvC,UAAIA,QAAQ,CAACM,QAAT,CAAkBD,MAAM,CAACE,IAAzB,CAAJ,EAAoC;AAClCC,QAAAA,OAAO,CAACV,QAAD,EAAWO,MAAX,CAAP;AACD;AACF;AACF,GAND,MAMO,IAAIL,QAAQ,IAAIA,QAAQ,CAACM,QAAT,CAAkB,KAAlB,CAAhB,EAA0C;AAC/C,UAAMG,KAAK,GAAGN,KAAK,CAACO,OAAN,CAAcC,IAAd,IAAsBR,KAAK,CAACS,OAA1C;AACAJ,IAAAA,OAAO,CAACV,QAAD,EAAW;AAChBS,MAAAA,IAAI,EAAE,KADU;AAEhBM,MAAAA,IAAI,EAAE,KAFU;AAGhBC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,GAAG,EAAEP,KAAK,CAACP;AAAvB,OAHU;AAIhBe,MAAAA,IAAI,EAAE;AAAEC,QAAAA,MAAM,EAAE,EAAV;AAAcT,QAAAA,KAAK,EAAEA;AAArB;AAJU,KAAX,CAAP;AAMD;AACF,CAjBD;;AAmBA,MAAMD,OAAO,GAAG,CAACV,QAAD,EAAWO,MAAX,KAAsB;AACpC,MAAI,CAACc,OAAO,CAACC,KAAR,CAActB,QAAd,CAAL,EAA8B;AAC5BqB,IAAAA,OAAO,CAACC,KAAR,CAActB,QAAd,IAA0B;AACxBS,MAAAA,IAAI,EAAET,QADkB;AAExBW,MAAAA,KAAK,EAAEJ,MAAM,CAACY,IAAP,CAAYR,KAFK;AAGxBJ,MAAAA,MAAM,EAAEA,MAHgB;AAIxBgB,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,EAJa;AAKxBC,MAAAA,KAAK,EAAE,CALiB;AAMxBC,MAAAA,YAAY,EAAE,IANU;AAOxBC,MAAAA,iBAAiB,EAAE,KAPK,CAOC;;AAPD,KAA1B;AASAP,IAAAA,OAAO,CAACC,KAAR,CAAcO,QAAd,GAAyB,CAAzB;AACD;AACF,CAbD;;AAeA,OAAO9B,QAAQ,CAAC+B,IAAI,CAAC9B,QAAN,EAAgB8B,IAAI,CAAC5B,QAArB,CAAf","sourceRoot":"/var/lib/jenkins/workspace/build-linux/modules/basic-skills/src/backend","sourcesContent":["/**\n * Extract entities that match a slot\n * @hidden true\n * @param slotName The name of the slot to extract. (e.g. destination_from)\n * @param entitiesName The entities of the slot. (e.g. City)\n */\nconst slotFill = async (slotName, entitiesName) => {\n  const entities = entitiesName.split(',')\n  if (entities && entities.length && event.nlu.entities && event.nlu.entities.length) {\n    for (const entity of event.nlu.entities) {\n      if (entities.includes(entity.name)) {\n        setSlot(slotName, entity)\n      }\n    }\n  } else if (entities && entities.includes('any')) {\n    const value = event.payload.text || event.preview\n    setSlot(slotName, {\n      name: 'any',\n      type: 'any',\n      meta: { start: 0, end: value.length },\n      data: { extras: {}, value: value }\n    })\n  }\n}\n\nconst setSlot = (slotName, entity) => {\n  if (!session.slots[slotName]) {\n    session.slots[slotName] = {\n      name: slotName,\n      value: entity.data.value,\n      entity: entity,\n      timestamp: Date.now(),\n      turns: 0,\n      overwritable: true,\n      expiresAfterTurns: false // BETA(11.8.4): Set this to a number to expire the slot after 'N' turns\n    }\n    session.slots.notFound = 0\n  }\n}\n\nreturn slotFill(args.slotName, args.entities)\n"]}